title:	feat: Add foundational utility modules for CLI functionality
state:	DRAFT
author:	ueneid
labels:	
assignees:	
reviewers:	
projects:	
milestone:	
number:	7
url:	https://github.com/ueneid/stand/pull/7
additions:	380
deletions:	3
auto-merge:	disabled
--
## Description

This PR introduces foundational utility modules that provide core functionality for the Stand CLI tool. These modules implement project root detection, terminal output colorization, and standardized error handling with user-friendly messages.

## Related Issue

Part of the CLI command structure implementation plan - establishes the foundation for subsequent CLI features.

## Type of Change

- [x] ✨ New feature (non-breaking change which adds functionality)
- [ ] 🐛 Bug fix (non-breaking change which fixes an issue)
- [ ] 💥 Breaking change (fix or feature that would cause existing functionality to not work as expected)
- [ ] 📝 Documentation update
- [ ] ♻️ Refactoring (no functional changes)
- [ ] 🧪 Test addition or modification
- [ ] 🔧 Configuration change

## Implementation Details

This PR implements three core utility modules following strict Test-Driven Development (TDD) methodology:

### Key Changes

- **Project Root Detection**: Implements upward directory traversal to locate `.stand.toml` or legacy `.stand/` directories from any subdirectory
- **Terminal Colorization**: Provides environment name colorization with 6 supported colors (red, green, blue, yellow, purple, cyan) and value masking for sensitive data
- **CLI Error Types**: Introduces comprehensive error handling with user-friendly messages and conversion from internal `ConfigError` types
- **Module Organization**: Adds convenience re-exports for commonly used functions to improve developer experience

### TDD Process Followed

- [x] Tests were written before implementation
- [x] All tests were RED before implementation  
- [x] Implementation was done to make tests GREEN
- [x] Refactoring was performed while keeping tests GREEN

## Architecture Diagram

```mermaid
flowchart TD
    A[CLI Application] --> B[Utils Module]
    B --> C[paths.rs]
    B --> D[colors.rs] 
    B --> E[error/types.rs]
    
    C --> C1[find_project_root]
    C --> C2[get_config_path]
    C1 --> C3[Upward Directory Traversal]
    C3 --> C4[.stand.toml Detection]
    C3 --> C5[.stand/ Directory Detection]
    
    D --> D1[colorize_environment]
    D --> D2[format_default_marker]
    D --> D3[mask_value]
    D1 --> D4[ANSI Color Codes]
    D3 --> D5[Sensitive Data Protection]
    
    E --> E1[CliError Enum]
    E --> E2[from_config_error]
    E1 --> E3[User-Friendly Messages]
    E2 --> E4[Internal Error Conversion]
    
    F[Future CLI Commands] -.-> B
    F -.-> G[validate command]
    F -.-> H[current command] 
    F -.-> I[list/show commands]
    F -.-> J[init command]
    
    style B fill:#e1f5fe
    style C fill:#f3e5f5
    style D fill:#f3e5f5
    style E fill:#f3e5f5
    style F fill:#fff3e0
```

## Testing

### Test Coverage

- [x] Unit tests added/updated
- [ ] Integration tests added/updated
- [ ] End-to-end tests added/updated
- [x] Current test coverage: 100% for new modules

### Test Scenarios Covered

1. **Project Root Detection Tests**:
   - Detection with `.stand.toml` file
   - Detection with legacy `.stand/` directory
   - Upward traversal from subdirectories
   - Proper error handling when no project found

2. **Color Functionality Tests**:
   - All 6 supported colors (red, green, blue, yellow, purple, cyan)
   - Invalid color fallback behavior
   - Default marker formatting
   - Value masking for sensitive data
   - Empty value handling

3. **Error Type Tests**:
   - All 8 CLI error variants with proper message formatting
   - ConfigError to CliError conversion logic
   - User-friendly message content validation

### Manual Testing

```bash
# Test project root detection
cd /path/to/project/subdirectory
cargo test test_find_project_root_in_subdirectory

# Test color output
cargo test test_colorize_environment_with_green

# Test error message formatting
cargo test test_project_not_initialized_error

# Run all utility tests
cargo test --lib utils colors error::types
```

## Checklist

### Code Quality

- [x] My code follows the project's style guidelines
- [x] I have performed a self-review of my own code
- [x] I have commented my code, particularly in hard-to-understand areas
- [x] My changes generate no new warnings
- [x] All tests pass locally with `cargo test`
- [x] Code passes `cargo clippy -- -D warnings`
- [x] Code is formatted with `cargo fmt`

### Documentation

- [ ] I have updated the documentation accordingly
- [ ] CLAUDE.md has been updated if needed
- [ ] docs/requirements.md has been updated if requirements were completed
- [ ] docs/design.md has been updated if design changes were made
- [ ] README.md has been updated if user-facing changes were made
- [x] Inline documentation/comments are up to date

### Commit History

- [x] Commits follow the conventional format (test:, feat:, refactor:, etc.)
- [x] Each commit represents a complete TDD cycle or logical unit
- [x] Commit messages are clear and descriptive
- [x] No WIP or temporary commits remain

## Screenshots/Examples

### Before

The codebase had stub implementations:
- `src/utils/paths.rs`: `// paths.rs module`
- `src/utils/colors.rs`: `// colors.rs module`  
- `src/error/types.rs`: `// types.rs module`

### After

Fully implemented utility modules:
- **35 passing tests** across all utility modules
- **Complete error handling** with 8 distinct error types
- **Project detection** working from any subdirectory
- **Terminal colorization** with 6 color options
- **Value masking** for sensitive data display

## Breaking Changes

- [ ] This PR includes breaking changes

## Additional Notes

This PR follows the approved implementation plan and represents the first of four planned PRs for CLI functionality:

1. **PR #1 (This PR)**: Utility modules (paths, colors, error types) ✅
2. **PR #2 (Next)**: Implement `validate` and `current` commands
3. **PR #3 (Future)**: Implement `list` and `show` commands  
4. **PR #4 (Future)**: Implement `init` command

The utilities implemented here provide the foundation that will be used by all subsequent CLI commands.

## Review Focus Areas

- TDD methodology adherence in commit history
- Error message user-friendliness and actionability
- Path traversal logic safety and cross-platform compatibility
- Test isolation and cleanup (especially directory manipulation tests)

---

### PR Submission Confirmation

- [x] I have tested these changes thoroughly
- [x] I have followed the development workflow guidelines
- [x] This PR is ready for review
